<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0067)http://www.unifycommunity.com/wiki/index.php?title=JSONObject#Intro -->
<html lang="en" dir="ltr"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>JSONObject - Unify Community Wiki</title>

<meta name="generator" content="MediaWiki 1.16.4">
<link rel="alternate" type="application/x-wiki" title="Edit" href="http://www.unifycommunity.com/wiki/index.php?title=JSONObject&action=edit">
<link rel="edit" title="Edit" href="http://www.unifycommunity.com/wiki/index.php?title=JSONObject&action=edit">
<link rel="shortcut icon" href="http://www.unifycommunity.com/favicon.ico">
<link rel="search" type="application/opensearchdescription+xml" href="http://www.unifycommunity.com/wiki/opensearch_desc.php" title="Unify Community Wiki (en)">
<link rel="alternate" type="application/atom+xml" title="Unify Community Wiki Atom feed" href="http://www.unifycommunity.com/wiki/index.php?title=Special:RecentChanges&feed=atom">
<link rel="stylesheet" href="http://www.unifycommunity.com/wiki/skins/common/shared.css?270" media="screen">
<link rel="stylesheet" href="http://www.unifycommunity.com/wiki/skins/common/commonPrint.css?270" media="print">
<link rel="stylesheet" href="http://www.unifycommunity.com/wiki/skins/monobook/main.css?270" media="screen">
<!--[if lt IE 5.5000]><link rel="stylesheet" href="/wiki/skins/monobook/IE50Fixes.css?270" media="screen" /><![endif]-->
<!--[if IE 5.5000]><link rel="stylesheet" href="/wiki/skins/monobook/IE55Fixes.css?270" media="screen" /><![endif]-->
<!--[if IE 6]><link rel="stylesheet" href="/wiki/skins/monobook/IE60Fixes.css?270" media="screen" /><![endif]-->
<!--[if IE 7]><link rel="stylesheet" href="/wiki/skins/monobook/IE70Fixes.css?270" media="screen" /><![endif]-->
<link rel="stylesheet" href="http://www.unifycommunity.com/wiki/index.php?title=MediaWiki:Common.css&usemsgcache=yes&ctype=text%2Fcss&smaxage=18000&action=raw&maxage=18000">
<link rel="stylesheet" href="http://www.unifycommunity.com/wiki/index.php?title=MediaWiki:Print.css&usemsgcache=yes&ctype=text%2Fcss&smaxage=18000&action=raw&maxage=18000" media="print">
<link rel="stylesheet" href="http://www.unifycommunity.com/wiki/index.php?title=MediaWiki:Monobook.css&usemsgcache=yes&ctype=text%2Fcss&smaxage=18000&action=raw&maxage=18000">
<link rel="stylesheet" href="http://www.unifycommunity.com/wiki/index.php?title=-&action=raw&maxage=18000&smaxage=0&ts=20110522205240&gen=css">
<script>
var skin="monobook",
stylepath="/wiki/skins",
wgUrlProtocols="http\\:\\/\\/|https\\:\\/\\/|ftp\\:\\/\\/|irc\\:\\/\\/|gopher\\:\\/\\/|telnet\\:\\/\\/|nntp\\:\\/\\/|worldwind\\:\\/\\/|mailto\\:|news\\:|svn\\:\\/\\/",
wgArticlePath="/wiki/index.php?title=$1",
wgScriptPath="/wiki",
wgScriptExtension=".php",
wgScript="/wiki/index.php",
wgVariantArticlePath=false,
wgActionPaths={},
wgServer="http://www.unifycommunity.com",
wgCanonicalNamespace="",
wgCanonicalSpecialPageName=false,
wgNamespaceNumber=0,
wgPageName="JSONObject",
wgTitle="JSONObject",
wgAction="view",
wgArticleId=2788,
wgIsArticle=true,
wgUserName="Scone",
wgUserGroups=["*", "user", "autoconfirmed"],
wgUserLanguage="en",
wgContentLanguage="en",
wgBreakFrames=false,
wgCurRevisionId=10647,
wgVersion="1.16.4",
wgEnableAPI=true,
wgEnableWriteAPI=true,
wgSeparatorTransformTable=["", ""],
wgDigitTransformTable=["", ""],
wgMainPageTitle="Main Page",
wgFormattedNamespaces={"-2": "Media", "-1": "Special", "0": "", "1": "Talk", "2": "User", "3": "User talk", "4": "Unify Community Wiki", "5": "Unify Community Wiki talk", "6": "File", "7": "File talk", "8": "MediaWiki", "9": "MediaWiki talk", "10": "Template", "11": "Template talk", "12": "Help", "13": "Help talk", "14": "Category", "15": "Category talk"},
wgNamespaceIds={"media": -2, "special": -1, "": 0, "talk": 1, "user": 2, "user_talk": 3, "unify_community_wiki": 4, "unify_community_wiki_talk": 5, "file": 6, "file_talk": 7, "mediawiki": 8, "mediawiki_talk": 9, "template": 10, "template_talk": 11, "help": 12, "help_talk": 13, "category": 14, "category_talk": 15, "image": 6, "image_talk": 7},
wgSiteName="Unify Community Wiki",
wgCategories=[],
wgRestrictionEdit=[],
wgRestrictionMove=[],
wgAjaxWatch={"watchMsg": "Watch", "unwatchMsg": "Unwatch", "watchingMsg": "Watching...", "unwatchingMsg": "Unwatching...", "tooltip-ca-watchMsg": "Add this page to your watchlist", "tooltip-ca-unwatchMsg": "Remove this page from your watchlist"};
</script><script src="./index_files/wikibits.js"></script>
<script src="./index_files/ajax.js"></script>
<script src="./index_files/ajaxwatch.js"></script>
<script src="./index_files/index.php"></script>

</head>
<body class="mediawiki ltr ns-0 ns-subject page-JSONObject skin-monobook">
<div id="globalWrapper">
<div id="column-content"><div id="content">
	<a id="top"></a>
	
	<h1 id="firstHeading" class="firstHeading">JSONObject [Cached on 5/22/2011]</h1>
	<div id="bodyContent">
		<h3 id="siteSub">From Unify Community Wiki</h3>
		<div id="contentSub"></div>
		<div id="jump-to-nav">Jump to: <a href="http://www.unifycommunity.com/wiki/index.php?title=JSONObject#column-one">navigation</a>, <a href="http://www.unifycommunity.com/wiki/index.php?title=JSONObject#searchInput">search</a></div>
		<!-- start content -->
<table id="toc" class="toc"><tbody><tr><td><div id="toctitle"><h2>Contents</h2> <span class="toctoggle">[<a id="togglelink" class="internal" href="javascript:toggleToc()">hide</a>]</span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="http://www.unifycommunity.com/wiki/index.php?title=JSONObject#Author"><span class="tocnumber">1</span> <span class="toctext">Author</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="http://www.unifycommunity.com/wiki/index.php?title=JSONObject#Download"><span class="tocnumber">2</span> <span class="toctext">Download</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="./index_files/index.htm"><span class="tocnumber">3</span> <span class="toctext">Intro</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="http://www.unifycommunity.com/wiki/index.php?title=JSONObject#Usage"><span class="tocnumber">4</span> <span class="toctext">Usage</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="http://www.unifycommunity.com/wiki/index.php?title=JSONObject#Features"><span class="tocnumber">5</span> <span class="toctext">Features</span></a>
<ul>
<li class="toclevel-2 tocsection-6"><a href="http://www.unifycommunity.com/wiki/index.php?title=JSONObject#Encoding"><span class="tocnumber">5.1</span> <span class="toctext">Encoding</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="http://www.unifycommunity.com/wiki/index.php?title=JSONObject#Decoding"><span class="tocnumber">5.2</span> <span class="toctext">Decoding</span></a>
<ul>
<li class="toclevel-3 tocsection-8"><a href="http://www.unifycommunity.com/wiki/index.php?title=JSONObject#New.21_.28O.28n.29.29_Random_access.21"><span class="tocnumber">5.2.1</span> <span class="toctext">New! (O(n)) Random access!</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1 tocsection-9"><a href="http://www.unifycommunity.com/wiki/index.php?title=JSONObject#The_JSONObject_class"><span class="tocnumber">6</span> <span class="toctext">The JSONObject class</span></a></li>
</ul>
</td></tr></tbody></table><script>if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } </script>
<h2><span class="editsection">[<a href="http://www.unifycommunity.com/wiki/index.php?title=JSONObject&action=edit&section=1" title="Edit section: Author">edit</a>]</span> <span class="mw-headline" id="Author">Author</span></h2>
<p><a href="mailto:matt@matt-schoen.com" class="external text" rel="nofollow">Matt Schoen</a> of <a href="http://www.defectivestudios.com/" class="external text" rel="nofollow">Defective Studios</a>
</p>
<h2><span class="editsection">[<a href="http://www.unifycommunity.com/wiki/index.php?title=JSONObject&action=edit&section=2" title="Edit section: Download">edit</a>]</span> <span class="mw-headline" id="Download">Download</span></h2>
<p><a href="http://www.unifycommunity.com/wiki/images/e/eb/JSONObject.zip" class="internal" title="JSONObject.zip">Download JSONObject.zip</a>
</p>
<h1><span class="editsection">[<a href="http://www.unifycommunity.com/wiki/index.php?title=JSONObject&action=edit&section=3" title="Edit section: Intro">edit</a>]</span> <span class="mw-headline" id="Intro"> Intro </span></h1>
<p>I came across the need to send structured data to and from a server on one of my projects, and figured it would be worth my while to use JSON.  When I looked into the issue, I tried a few of the C# implementations listed on <a href="http://json.org/" class="external text" rel="nofollow">json.org</a>, but found them to be too complicated.  So, I've written a very simple JSONObject class, which can be generically used to encode/decode data into a simple container.  This page assumes that you know what JSON is, and how it works.  It's rather simple, just go to json.org for a visual description of the encoding format.
</p><p>As an aside, this class is pretty central to the <a href="http://www.unifycommunity.com/wiki/index.php?title=AssetCloud" title="AssetCloud">AssetCloud</a> content management system, from Defective Studios.
</p>
<h1><span class="editsection">[<a href="http://www.unifycommunity.com/wiki/index.php?title=JSONObject&action=edit&section=4" title="Edit section: Usage">edit</a>]</span> <span class="mw-headline" id="Usage"> Usage </span></h1>
<p>Users should not have to modify the JSONObject class themselves, and must follow the very simple proceedures outlined below:
</p><p>Sample data (in JSON format): {"field1":0.5,"field2":"sampletext","field3":[1,2,3]}
</p>
<h1><span class="editsection">[<a href="http://www.unifycommunity.com/wiki/index.php?title=JSONObject&action=edit&section=5" title="Edit section: Features">edit</a>]</span> <span class="mw-headline" id="Features"> Features </span></h1>
<ul><li>Decode JSON-formatted strings into a usable data structure
</li><li>Encode structured data into a JSON-formatted string
</li><li>Interoperable with System.Collections.Generic.Dictionary
</li><li>Copy to new JSONObject
</li><li>Merge with another JSONObject (experimental)
</li><li>Random access (with [int] or [string])
</li><li>ToString() returns JSON data
</li></ul>
<p>It should be pretty obvious what this parser can and cannot do.  If anyone reading this is a JSON buff (is there such a thing?) please feel free to expand and modify the parser to be more compliant.  Currently I am using the .NET System.Convert namespace functions for parsing the data itself.  It parses strings and numbers, which was all that I needed of it, but unless the formatting is supported by System.Convert, it may not incorporate all proper JSON strings.  Also, having never written a JSON parser before, I don't doubt that I could improve the efficiency or correctness of the parser.  It serves my purpose, and hopefully will help you with your project!  Let me know if you make any improvements&nbsp;:)
</p>
<h2><span class="editsection">[<a href="http://www.unifycommunity.com/wiki/index.php?title=JSONObject&action=edit&section=6" title="Edit section: Encoding">edit</a>]</span> <span class="mw-headline" id="Encoding"> Encoding </span></h2>
<p>Encoding is something of a hard-coded process.  This is because I have no idea what your data is!  It would be great if this were some sort of interface for taking an entire class and encoding it's number/string fields, but it's not.  I've come up with a few clever ways of using loops and/or recursive methods to cut down of the amount of code I have to write when I use this tool, but they're pretty project-specific.
</p><p>Note: This section used to be WRONG!
</p>
<div class="csharp"><br>
<p><span style="color: #008080; font-style: italic;">//Note: your data can only be numbers and strings.&nbsp; This is not a solution for object serialization or anything like that.</span><br>
JSONObject j = <span style="color: #008000;">new</span> JSONObject<span style="color: #000000;">(</span>JSONObject.<span style="color: #0000FF;">Type</span>.<span style="color: #FF0000;">OBJECT</span><span style="color: #000000;">)</span>;<br>
<span style="color: #008080; font-style: italic;">//number</span><br>
j.<span style="color: #0000FF;">AddField</span><span style="color: #000000;">(</span><span style="color: #808080;">"field1"</span>, <span style="color: #FF0000;">0</span><span style="color: #FF0000;">.5</span><span style="color: #000000;">)</span>;<br>
<span style="color: #008080; font-style: italic;">//string</span><br>
j.<span style="color: #0000FF;">AddField</span><span style="color: #000000;">(</span><span style="color: #808080;">"field2"</span>, <span style="color: #808080;">"sampletext"</span><span style="color: #000000;">)</span>;<br>
<span style="color: #008080; font-style: italic;">//array</span><br>
JSONObject arr = <span style="color: #008000;">new</span> JSONObject<span style="color: #000000;">(</span>JSONObject.<span style="color: #0000FF;">Type</span>.<span style="color: #0000FF;">ARRAY</span><span style="color: #000000;">)</span>;<br>
j.<span style="color: #0000FF;">AddField</span><span style="color: #000000;">(</span><span style="color: #808080;">"field3"</span>, arr<span style="color: #000000;">)</span>;<br>
<br>
arr.<span style="color: #0000FF;">Add</span><span style="color: #000000;">(</span><span style="color: #FF0000;">1</span><span style="color: #000000;">)</span>;<br>
arr.<span style="color: #0000FF;">Add</span><span style="color: #000000;">(</span><span style="color: #FF0000;">2</span><span style="color: #000000;">)</span>;<br>
arr.<span style="color: #0000FF;">Add</span><span style="color: #000000;">(</span><span style="color: #FF0000;">3</span><span style="color: #000000;">)</span>;<br>
<br>
<span style="color: #FF0000;">string</span> encodedString = j.<span style="color: #0000FF;">print</span><span style="color: #000000;">(</span><span style="color: #000000;">)</span>;<br>
</p>
&nbsp;</div>
<h2><span class="editsection">[<a href="http://www.unifycommunity.com/wiki/index.php?title=JSONObject&action=edit&section=7" title="Edit section: Decoding">edit</a>]</span> <span class="mw-headline" id="Decoding"> Decoding </span></h2>
<p>Decoding is much simpler on the input end, and again, what you do with the JSONObject will vary on a per-project basis.  One of the more complicated way to extract the data is with a recursive function, as drafted below.  Calling the constructor with a properly formatted JSON string will return the root object (or array) containing all of its children, in one neat reference!  The data is in a public ArrayList called list, with a matching key list (called keys!) if the root is an Object.  If that's confusing, take a glance over the following code and the print() method in the JSONOBject class.  If there is an error in the JSON formatting (or if there's an error with my code!) the debug console will read "improper JSON formatting".
</p><p><br>
</p>
<div class="csharp"><br>
<p><span style="color: #FF0000;">string</span> encodedString = <span style="color: #808080;">"{<span style="color: #008080; font-weight: bold;">\"</span>field1<span style="color: #008080; font-weight: bold;">\"</span>:0.5,<span style="color: #008080; font-weight: bold;">\"</span>field2<span style="color: #008080; font-weight: bold;">\"</span>:<span style="color: #008080; font-weight: bold;">\"</span>sampletext<span style="color: #008080; font-weight: bold;">\"</span>,<span style="color: #008080; font-weight: bold;">\"</span>field3<span style="color: #008080; font-weight: bold;">\"</span>:[1,2,3]}"</span>;<br>
JSONObject j = <span style="color: #008000;">new</span> JSONObject<span style="color: #000000;">(</span>encodedString<span style="color: #000000;">)</span>;<br>
accessData<span style="color: #000000;">(</span>j<span style="color: #000000;">)</span>;<br>
<span style="color: #008080; font-style: italic;">//access data (and print it)</span><br>
<span style="color: #0600FF;">void</span> accessData<span style="color: #000000;">(</span>JSONObject obj<span style="color: #000000;">)</span><span style="color: #000000;">{</span><br>
&nbsp; &nbsp; <span style="color: #0600FF;">switch</span><span style="color: #000000;">(</span>obj.<span style="color: #0000FF;">type</span><span style="color: #000000;">)</span><span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">case</span> JSONObject.<span style="color: #0000FF;">Type</span>.<span style="color: #FF0000;">OBJECT</span>:<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">for</span><span style="color: #000000;">(</span><span style="color: #FF0000;">int</span> i = <span style="color: #FF0000;">0</span>; i &lt; obj.<span style="color: #0000FF;">list</span>.<span style="color: #0000FF;">Count</span>; i++<span style="color: #000000;">)</span><span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #FF0000;">string</span> key = <span style="color: #000000;">(</span><span style="color: #FF0000;">string</span><span style="color: #000000;">)</span>obj.<span style="color: #0000FF;">keys</span><span style="color: #000000;">[</span>i<span style="color: #000000;">]</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; JSONObject j = <span style="color: #000000;">(</span>JSONObject<span style="color: #000000;">)</span>obj.<span style="color: #0000FF;">list</span><span style="color: #000000;">[</span>i<span style="color: #000000;">]</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <a href="http://unity3d.com/Documentation/ScriptReference/Debug.html"><span style="color: #000022;">Debug</span></a>.<span style="color: #0000FF;">Log</span><span style="color: #000000;">(</span>key<span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; accessData<span style="color: #000000;">(</span>j<span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">break</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">case</span> JSONObject.<span style="color: #0000FF;">Type</span>.<span style="color: #0000FF;">ARRAY</span>:<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">foreach</span><span style="color: #000000;">(</span>JSONObject j <span style="color: #0600FF;">in</span> obj.<span style="color: #0000FF;">list</span><span style="color: #000000;">)</span><span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; accessData<span style="color: #000000;">(</span>j<span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">break</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">case</span> JSONObject.<span style="color: #0000FF;">Type</span>.<span style="color: #FF0000;">STRING</span>:<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <a href="http://unity3d.com/Documentation/ScriptReference/Debug.html"><span style="color: #000022;">Debug</span></a>.<span style="color: #0000FF;">Log</span><span style="color: #000000;">(</span>obj.<span style="color: #0000FF;">str</span><span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">break</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">case</span> JSONObject.<span style="color: #0000FF;">Type</span>.<span style="color: #0000FF;">NUMBER</span>:<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <a href="http://unity3d.com/Documentation/ScriptReference/Debug.html"><span style="color: #000022;">Debug</span></a>.<span style="color: #0000FF;">Log</span><span style="color: #000000;">(</span>obj.<span style="color: #0000FF;">n</span><span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">break</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">case</span> JSONObject.<span style="color: #0000FF;">Type</span>.<span style="color: #FF0000;">BOOL</span>:<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <a href="http://unity3d.com/Documentation/ScriptReference/Debug.html"><span style="color: #000022;">Debug</span></a>.<span style="color: #0000FF;">Log</span><span style="color: #000000;">(</span>obj.<span style="color: #0000FF;">b</span><span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">break</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">case</span> JSONObject.<span style="color: #0000FF;">Type</span>.<span style="color: #0600FF;">NULL</span>:<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <a href="http://unity3d.com/Documentation/ScriptReference/Debug.html"><span style="color: #000022;">Debug</span></a>.<span style="color: #0000FF;">Log</span><span style="color: #000000;">(</span><span style="color: #808080;">"NULL"</span><span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">break</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; <br>
&nbsp; &nbsp; <span style="color: #000000;">}</span><br>
<span style="color: #000000;">}</span><br>
</p>
&nbsp;</div>
<h3><span class="editsection">[<a href="http://www.unifycommunity.com/wiki/index.php?title=JSONObject&action=edit&section=8" title="Edit section: New! (O(n)) Random access!">edit</a>]</span> <span class="mw-headline" id="New.21_.28O.28n.29.29_Random_access.21">New! (O(n)) Random access!</span></h3>
<p>I've added a string and int [] index to the class, so you can now retrieve data as such (from above):
</p>
<div class="csharp"><br>
<p>JSONObject arr = obj<span style="color: #000000;">[</span><span style="color: #808080;">"field3"</span><span style="color: #000000;">]</span>;<br>
<a href="http://unity3d.com/Documentation/ScriptReference/Debug.html"><span style="color: #000022;">Debug</span></a>.<span style="color: #0000FF;">log</span><span style="color: #000000;">(</span>arr<span style="color: #000000;">[</span><span style="color: #FF0000;">2</span><span style="color: #000000;">]</span>.<span style="color: #0000FF;">n</span><span style="color: #000000;">)</span>;&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #008080; font-style: italic;">//Should ouptut "3"</span><br>
</p>
&nbsp;</div>
<hr>
<h1><span class="editsection">[<a href="http://www.unifycommunity.com/wiki/index.php?title=JSONObject&action=edit&section=9" title="Edit section: The JSONObject class">edit</a>]</span> <span class="mw-headline" id="The_JSONObject_class">The JSONObject class</span></h1>
<div class="csharp"><br>
<p><span style="color: #008080;">#define READABLE</span><br>
<br>
<span style="color: #0600FF;">using</span> UnityEngine;<br>
<span style="color: #0600FF;">using</span> <a href="http://search.microsoft.com/search/results.aspx?qu=system.collections"><span style="color: #000000;">System.<span style="color: #0000FF;">Collections</span></span></a>;<br>
<span style="color: #0600FF;">using</span> <a href="http://search.microsoft.com/search/results.aspx?qu=system.collections"><span style="color: #000000;">System.<span style="color: #0000FF;">Collections</span></span></a>.<span style="color: #0000FF;">Generic</span>;<br>
<br>
<span style="color: #008080; font-style: italic;">/*<br>
&nbsp;* http://www.opensource.org/licenses/lgpl-2.1.php<br>
&nbsp;* JSONObject class<br>
&nbsp;* for use with Unity<br>
&nbsp;* Copyright Matt Schoen 2010<br>
&nbsp;*/</span><br>
<br>
<span style="color: #0600FF;">public</span> <span style="color: #FF0000;">class</span> JSONObject&nbsp;: Nullable <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; <span style="color: #0600FF;">const</span> <span style="color: #FF0000;">int</span> MAX_DEPTH = <span style="color: #FF0000;">1000</span>;<br>
&nbsp; &nbsp; <span style="color: #0600FF;">public</span> <span style="color: #FF0000;">enum</span> Type <span style="color: #000000;">{</span> <span style="color: #0600FF;">NULL</span>, <span style="color: #FF0000;">STRING</span>, NUMBER, <span style="color: #FF0000;">OBJECT</span>, ARRAY, <span style="color: #FF0000;">BOOL</span> <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; <span style="color: #0600FF;">public</span> JSONObject parent;<br>
&nbsp; &nbsp; <span style="color: #0600FF;">public</span> Type type = Type.<span style="color: #0600FF;">NULL</span>;<br>
&nbsp; &nbsp; <span style="color: #0600FF;">public</span> ArrayList list = <span style="color: #008000;">new</span> ArrayList<span style="color: #000000;">(</span><span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; <span style="color: #0600FF;">public</span> ArrayList keys = <span style="color: #008000;">new</span> ArrayList<span style="color: #000000;">(</span><span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; <span style="color: #0600FF;">public</span> <span style="color: #FF0000;">string</span> str;<br>
&nbsp; &nbsp; <span style="color: #0600FF;">public</span> <span style="color: #FF0000;">double</span> n;<br>
&nbsp; &nbsp; <span style="color: #0600FF;">public</span> <span style="color: #FF0000;">bool</span> b;<br>
<br>
&nbsp; &nbsp; <span style="color: #0600FF;">public</span> <span style="color: #0600FF;">static</span> JSONObject nullJO <span style="color: #000000;">{</span> get <span style="color: #000000;">{</span> <span style="color: #0600FF;">return</span> <span style="color: #008000;">new</span> JSONObject<span style="color: #000000;">(</span>JSONObject.<span style="color: #0000FF;">Type</span>.<span style="color: #0600FF;">NULL</span><span style="color: #000000;">)</span>; <span style="color: #000000;">}</span> <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; <span style="color: #0600FF;">public</span> <span style="color: #0600FF;">static</span> JSONObject obj <span style="color: #000000;">{</span> get <span style="color: #000000;">{</span> <span style="color: #0600FF;">return</span> <span style="color: #008000;">new</span> JSONObject<span style="color: #000000;">(</span>JSONObject.<span style="color: #0000FF;">Type</span>.<span style="color: #FF0000;">OBJECT</span><span style="color: #000000;">)</span>; <span style="color: #000000;">}</span> <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; <span style="color: #0600FF;">public</span> <span style="color: #0600FF;">static</span> JSONObject arr <span style="color: #000000;">{</span> get <span style="color: #000000;">{</span> <span style="color: #0600FF;">return</span> <span style="color: #008000;">new</span> JSONObject<span style="color: #000000;">(</span>JSONObject.<span style="color: #0000FF;">Type</span>.<span style="color: #0000FF;">ARRAY</span><span style="color: #000000;">)</span>; <span style="color: #000000;">}</span> <span style="color: #000000;">}</span><br>
<br>
&nbsp; &nbsp; <span style="color: #0600FF;">public</span> JSONObject<span style="color: #000000;">(</span>JSONObject.<span style="color: #0000FF;">Type</span> t<span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; type = t;<br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">switch</span><span style="color: #000000;">(</span>t<span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">case</span> Type.<span style="color: #0000FF;">ARRAY</span>:<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; list = <span style="color: #008000;">new</span> ArrayList<span style="color: #000000;">(</span><span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">break</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">case</span> Type.<span style="color: #FF0000;">OBJECT</span>:<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; list = <span style="color: #008000;">new</span> ArrayList<span style="color: #000000;">(</span><span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; keys = <span style="color: #008000;">new</span> ArrayList<span style="color: #000000;">(</span><span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">break</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; <span style="color: #0600FF;">public</span> JSONObject<span style="color: #000000;">(</span><span style="color: #FF0000;">bool</span> b<span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; type = Type.<span style="color: #FF0000;">BOOL</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">this</span>.<span style="color: #0000FF;">b</span> = b;<br>
&nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; <span style="color: #0600FF;">public</span> JSONObject<span style="color: #000000;">(</span><span style="color: #FF0000;">float</span> f<span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; type = Type.<span style="color: #0000FF;">NUMBER</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">this</span>.<span style="color: #0000FF;">n</span> = f;<br>
&nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; <span style="color: #0600FF;">public</span> JSONObject<span style="color: #000000;">(</span>Dictionary&lt;string, string&gt; dic<span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; type = Type.<span style="color: #FF0000;">OBJECT</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">foreach</span><span style="color: #000000;">(</span>KeyValuePair&lt;string, string&gt; kvp <span style="color: #0600FF;">in</span> dic<span style="color: #000000;">)</span><span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; keys.<span style="color: #0000FF;">Add</span><span style="color: #000000;">(</span>kvp.<span style="color: #0000FF;">Key</span><span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; list.<span style="color: #0000FF;">Add</span><span style="color: #000000;">(</span>kvp.<span style="color: #0000FF;">Value</span><span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; <span style="color: #0600FF;">public</span> JSONObject<span style="color: #000000;">(</span><span style="color: #000000;">)</span> <span style="color: #000000;">{</span> <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; <span style="color: #0600FF;">public</span> JSONObject<span style="color: #000000;">(</span><span style="color: #FF0000;">string</span> str<span style="color: #000000;">)</span> <span style="color: #000000;">{</span>&nbsp;<span style="color: #008080; font-style: italic;">//create a new JSONObject from a string (this will also create any children, and parse the whole string)</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #008080; font-style: italic;">//Debug.Log(str);</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">if</span><span style="color: #000000;">(</span>str&nbsp;!= <span style="color: #0600FF;">null</span><span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
<span style="color: #008080;">#if(READABLE)</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; str = str.<span style="color: #0000FF;">Replace</span><span style="color: #000000;">(</span><span style="color: #808080;">"<span style="color: #008080; font-weight: bold;">\\</span>n"</span>, <span style="color: #808080;">""</span><span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; str = str.<span style="color: #0000FF;">Replace</span><span style="color: #000000;">(</span><span style="color: #808080;">"<span style="color: #008080; font-weight: bold;">\\</span>t"</span>, <span style="color: #808080;">""</span><span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; str = str.<span style="color: #0000FF;">Replace</span><span style="color: #000000;">(</span><span style="color: #808080;">"<span style="color: #008080; font-weight: bold;">\\</span>r"</span>, <span style="color: #808080;">""</span><span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; str = str.<span style="color: #0000FF;">Replace</span><span style="color: #000000;">(</span><span style="color: #808080;">"<span style="color: #008080; font-weight: bold;">\t</span>"</span>, <span style="color: #808080;">""</span><span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; str = str.<span style="color: #0000FF;">Replace</span><span style="color: #000000;">(</span><span style="color: #808080;">"<span style="color: #008080; font-weight: bold;">\n</span>"</span>, <span style="color: #808080;">""</span><span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; str = str.<span style="color: #0000FF;">Replace</span><span style="color: #000000;">(</span><span style="color: #808080;">"<span style="color: #008080; font-weight: bold;">\\</span>"</span>, <span style="color: #808080;">""</span><span style="color: #000000;">)</span>;<br>
<span style="color: #008080;">#endif</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">if</span><span style="color: #000000;">(</span>str.<span style="color: #0000FF;">Length</span> &gt; <span style="color: #FF0000;">0</span><span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">if</span><span style="color: #000000;">(</span><span style="color: #FF0000;">string</span>.<span style="color: #0000FF;">Compare</span><span style="color: #000000;">(</span>str, <span style="color: #808080;">"true"</span>, <span style="color: #0600FF;">true</span><span style="color: #000000;">)</span> == <span style="color: #FF0000;">0</span><span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; type = Type.<span style="color: #FF0000;">BOOL</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; b = <span style="color: #0600FF;">true</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000000;">}</span> <span style="color: #0600FF;">else</span> <span style="color: #0600FF;">if</span><span style="color: #000000;">(</span><span style="color: #FF0000;">string</span>.<span style="color: #0000FF;">Compare</span><span style="color: #000000;">(</span>str, <span style="color: #808080;">"false"</span>, <span style="color: #0600FF;">true</span><span style="color: #000000;">)</span> == <span style="color: #FF0000;">0</span><span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; type = Type.<span style="color: #FF0000;">BOOL</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; b = <span style="color: #0600FF;">false</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000000;">}</span> <span style="color: #0600FF;">else</span> <span style="color: #0600FF;">if</span><span style="color: #000000;">(</span>str == <span style="color: #808080;">"null"</span><span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; type = Type.<span style="color: #0600FF;">NULL</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000000;">}</span> <span style="color: #0600FF;">else</span> <span style="color: #0600FF;">if</span><span style="color: #000000;">(</span>str<span style="color: #000000;">[</span><span style="color: #FF0000;">0</span><span style="color: #000000;">]</span> == <span style="color: #808080;">'"'</span><span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; type = Type.<span style="color: #FF0000;">STRING</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">this</span>.<span style="color: #0000FF;">str</span> = str.<span style="color: #0000FF;">Substring</span><span style="color: #000000;">(</span><span style="color: #FF0000;">1</span>, str.<span style="color: #0000FF;">Length</span> - <span style="color: #FF0000;">2</span><span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000000;">}</span> <span style="color: #0600FF;">else</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">try</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; n = <a href="http://search.microsoft.com/search/results.aspx?qu=system"><span style="color: #000000;">System</span></a>.<span style="color: #0000FF;">Convert</span>.<span style="color: #0000FF;">ToDouble</span><span style="color: #000000;">(</span>str<span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; type = Type.<span style="color: #0000FF;">NUMBER</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000000;">}</span> <span style="color: #0600FF;">catch</span><span style="color: #000000;">(</span><a href="http://search.microsoft.com/search/results.aspx?qu=system"><span style="color: #000000;">System</span></a>.<span style="color: #0000FF;">FormatException</span><span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #FF0000;">int</span> token_tmp = <span style="color: #FF0000;">0</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #008080; font-style: italic;">/*<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; * Checking for the following formatting (www.json.org)<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; * object - {"field1":value,"field2":value}<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; * array - [value,value,value]<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; * value - string&nbsp; &nbsp;- "string"<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; *&nbsp; &nbsp;&nbsp; - number&nbsp;- 0.0<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; *&nbsp; &nbsp;&nbsp; - bool&nbsp; &nbsp;&nbsp; &nbsp;- true -or- false<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; *&nbsp; &nbsp;&nbsp; - null&nbsp; &nbsp;&nbsp; &nbsp;- null<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; */</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">switch</span><span style="color: #000000;">(</span>str<span style="color: #000000;">[</span><span style="color: #FF0000;">0</span><span style="color: #000000;">]</span><span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">case</span> <span style="color: #808080;">'{'</span>:<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; type = Type.<span style="color: #FF0000;">OBJECT</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; keys = <span style="color: #008000;">new</span> ArrayList<span style="color: #000000;">(</span><span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; list = <span style="color: #008000;">new</span> ArrayList<span style="color: #000000;">(</span><span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">break</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">case</span> <span style="color: #808080;">'['</span>:<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; type = JSONObject.<span style="color: #0000FF;">Type</span>.<span style="color: #0000FF;">ARRAY</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; list = <span style="color: #008000;">new</span> ArrayList<span style="color: #000000;">(</span><span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">break</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">default</span>:<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; type = Type.<span style="color: #0600FF;">NULL</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <a href="http://unity3d.com/Documentation/ScriptReference/Debug.html"><span style="color: #000022;">Debug</span></a>.<span style="color: #0000FF;">LogWarning</span><span style="color: #000000;">(</span><span style="color: #808080;">"improper JSON formatting:"</span> + str<span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">return</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #FF0000;">int</span> depth = <span style="color: #FF0000;">0</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #FF0000;">bool</span> openquote = <span style="color: #0600FF;">false</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #FF0000;">bool</span> inProp = <span style="color: #0600FF;">false</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">for</span><span style="color: #000000;">(</span><span style="color: #FF0000;">int</span> i = <span style="color: #FF0000;">1</span>; i &lt; str.<span style="color: #0000FF;">Length</span>; i++<span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">if</span><span style="color: #000000;">(</span>str<span style="color: #000000;">[</span>i<span style="color: #000000;">]</span> == <span style="color: #808080;">'<span style="color: #008080; font-weight: bold;">\\</span>'</span><span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; i++;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">continue</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">if</span><span style="color: #000000;">(</span>str<span style="color: #000000;">[</span>i<span style="color: #000000;">]</span> == <span style="color: #808080;">'"'</span><span style="color: #000000;">)</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; openquote =&nbsp;!openquote;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">if</span><span style="color: #000000;">(</span>str<span style="color: #000000;">[</span>i<span style="color: #000000;">]</span> == <span style="color: #808080;">'['</span> || str<span style="color: #000000;">[</span>i<span style="color: #000000;">]</span> == <span style="color: #808080;">'{'</span><span style="color: #000000;">)</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; depth++;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">if</span><span style="color: #000000;">(</span>depth == <span style="color: #FF0000;">0</span> &amp;&amp;&nbsp;!openquote<span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">if</span><span style="color: #000000;">(</span>str<span style="color: #000000;">[</span>i<span style="color: #000000;">]</span> == <span style="color: #808080;">':'</span> &amp;&amp;&nbsp;!inProp<span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; inProp = <span style="color: #0600FF;">true</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">try</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; keys.<span style="color: #0000FF;">Add</span><span style="color: #000000;">(</span>str.<span style="color: #0000FF;">Substring</span><span style="color: #000000;">(</span>token_tmp + <span style="color: #FF0000;">2</span>, i - token_tmp - <span style="color: #FF0000;">3</span><span style="color: #000000;">)</span><span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000000;">}</span> <span style="color: #0600FF;">catch</span> <span style="color: #000000;">{</span> <a href="http://unity3d.com/Documentation/ScriptReference/Debug.html"><span style="color: #000022;">Debug</span></a>.<span style="color: #0000FF;">Log</span><span style="color: #000000;">(</span>i + <span style="color: #808080;">" - "</span> + str.<span style="color: #0000FF;">Length</span> + <span style="color: #808080;">" - "</span> + str<span style="color: #000000;">)</span>; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; token_tmp = i;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">if</span><span style="color: #000000;">(</span>str<span style="color: #000000;">[</span>i<span style="color: #000000;">]</span> == <span style="color: #808080;">','</span><span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; inProp = <span style="color: #0600FF;">false</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; list.<span style="color: #0000FF;">Add</span><span style="color: #000000;">(</span><span style="color: #008000;">new</span> JSONObject<span style="color: #000000;">(</span>str.<span style="color: #0000FF;">Substring</span><span style="color: #000000;">(</span>token_tmp + <span style="color: #FF0000;">1</span>, i - token_tmp - <span style="color: #FF0000;">1</span><span style="color: #000000;">)</span><span style="color: #000000;">)</span><span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; token_tmp = i;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">if</span><span style="color: #000000;">(</span>str<span style="color: #000000;">[</span>i<span style="color: #000000;">]</span> == <span style="color: #808080;">']'</span> || str<span style="color: #000000;">[</span>i<span style="color: #000000;">]</span> == <span style="color: #808080;">'}'</span><span style="color: #000000;">)</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; list.<span style="color: #0000FF;">Add</span><span style="color: #000000;">(</span><span style="color: #008000;">new</span> JSONObject<span style="color: #000000;">(</span>str.<span style="color: #0000FF;">Substring</span><span style="color: #000000;">(</span>token_tmp + <span style="color: #FF0000;">1</span>, i - token_tmp - <span style="color: #FF0000;">1</span><span style="color: #000000;">)</span><span style="color: #000000;">)</span><span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">if</span><span style="color: #000000;">(</span>str<span style="color: #000000;">[</span>i<span style="color: #000000;">]</span> == <span style="color: #808080;">']'</span> || str<span style="color: #000000;">[</span>i<span style="color: #000000;">]</span> == <span style="color: #808080;">'}'</span><span style="color: #000000;">)</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; depth--;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000000;">}</span> <span style="color: #0600FF;">else</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; type = Type.<span style="color: #0600FF;">NULL</span>;&nbsp; &nbsp;<span style="color: #008080; font-style: italic;">//If the string is missing, this is a null</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; <span style="color: #0600FF;">public</span> <span style="color: #0600FF;">void</span> Add<span style="color: #000000;">(</span><span style="color: #FF0000;">bool</span> val<span style="color: #000000;">)</span> <span style="color: #000000;">{</span> Add<span style="color: #000000;">(</span><span style="color: #008000;">new</span> JSONObject<span style="color: #000000;">(</span>val<span style="color: #000000;">)</span><span style="color: #000000;">)</span>; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; <span style="color: #0600FF;">public</span> <span style="color: #0600FF;">void</span> Add<span style="color: #000000;">(</span><span style="color: #FF0000;">float</span> val<span style="color: #000000;">)</span> <span style="color: #000000;">{</span> Add<span style="color: #000000;">(</span><span style="color: #008000;">new</span> JSONObject<span style="color: #000000;">(</span>val<span style="color: #000000;">)</span><span style="color: #000000;">)</span>; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; <span style="color: #0600FF;">public</span> <span style="color: #0600FF;">void</span> Add<span style="color: #000000;">(</span><span style="color: #FF0000;">int</span> val<span style="color: #000000;">)</span> <span style="color: #000000;">{</span> Add<span style="color: #000000;">(</span><span style="color: #008000;">new</span> JSONObject<span style="color: #000000;">(</span>val<span style="color: #000000;">)</span><span style="color: #000000;">)</span>; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; <span style="color: #0600FF;">public</span> <span style="color: #0600FF;">void</span> Add<span style="color: #000000;">(</span>JSONObject obj<span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">if</span><span style="color: #000000;">(</span>obj<span style="color: #000000;">)</span> <span style="color: #000000;">{</span>&nbsp; &nbsp;&nbsp; &nbsp;<span style="color: #008080; font-style: italic;">//Don't do anything if the object is null</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">if</span><span style="color: #000000;">(</span>type&nbsp;!= JSONObject.<span style="color: #0000FF;">Type</span>.<span style="color: #0000FF;">ARRAY</span><span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; type = JSONObject.<span style="color: #0000FF;">Type</span>.<span style="color: #0000FF;">ARRAY</span>;&nbsp; &nbsp;&nbsp; &nbsp;<span style="color: #008080; font-style: italic;">//Congratulations, son, you're an ARRAY now</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <a href="http://unity3d.com/Documentation/ScriptReference/Debug.html"><span style="color: #000022;">Debug</span></a>.<span style="color: #0000FF;">LogWarning</span><span style="color: #000000;">(</span><span style="color: #808080;">"tried to add an object to a non-array JSONObject.&nbsp; We'll do it for you, but you might be doing something wrong."</span><span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; list.<span style="color: #0000FF;">Add</span><span style="color: #000000;">(</span>obj<span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; <span style="color: #0600FF;">public</span> <span style="color: #0600FF;">void</span> AddField<span style="color: #000000;">(</span><span style="color: #FF0000;">string</span> name, <span style="color: #FF0000;">bool</span> val<span style="color: #000000;">)</span> <span style="color: #000000;">{</span> AddField<span style="color: #000000;">(</span>name, <span style="color: #008000;">new</span> JSONObject<span style="color: #000000;">(</span>val<span style="color: #000000;">)</span><span style="color: #000000;">)</span>; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; <span style="color: #0600FF;">public</span> <span style="color: #0600FF;">void</span> AddField<span style="color: #000000;">(</span><span style="color: #FF0000;">string</span> name, <span style="color: #FF0000;">float</span> val<span style="color: #000000;">)</span> <span style="color: #000000;">{</span> AddField<span style="color: #000000;">(</span>name, <span style="color: #008000;">new</span> JSONObject<span style="color: #000000;">(</span>val<span style="color: #000000;">)</span><span style="color: #000000;">)</span>; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; <span style="color: #0600FF;">public</span> <span style="color: #0600FF;">void</span> AddField<span style="color: #000000;">(</span><span style="color: #FF0000;">string</span> name, <span style="color: #FF0000;">int</span> val<span style="color: #000000;">)</span> <span style="color: #000000;">{</span> AddField<span style="color: #000000;">(</span>name, <span style="color: #008000;">new</span> JSONObject<span style="color: #000000;">(</span>val<span style="color: #000000;">)</span><span style="color: #000000;">)</span>; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; <span style="color: #0600FF;">public</span> <span style="color: #0600FF;">void</span> AddField<span style="color: #000000;">(</span><span style="color: #FF0000;">string</span> name, <span style="color: #FF0000;">string</span> val<span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; AddField<span style="color: #000000;">(</span>name, <span style="color: #008000;">new</span> JSONObject <span style="color: #000000;">{</span> type = JSONObject.<span style="color: #0000FF;">Type</span>.<span style="color: #FF0000;">STRING</span>, str = val <span style="color: #000000;">}</span><span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; <span style="color: #0600FF;">public</span> <span style="color: #0600FF;">void</span> AddField<span style="color: #000000;">(</span><span style="color: #FF0000;">string</span> name, JSONObject obj<span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">if</span><span style="color: #000000;">(</span>obj<span style="color: #000000;">)</span><span style="color: #000000;">{</span>&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #008080; font-style: italic;">//Don't do anything if the object is null</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">if</span><span style="color: #000000;">(</span>type&nbsp;!= JSONObject.<span style="color: #0000FF;">Type</span>.<span style="color: #FF0000;">OBJECT</span><span style="color: #000000;">)</span><span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; type = JSONObject.<span style="color: #0000FF;">Type</span>.<span style="color: #FF0000;">OBJECT</span>;&nbsp; &nbsp; <span style="color: #008080; font-style: italic;">//Congratulations, son, you're an OBJECT now</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <a href="http://unity3d.com/Documentation/ScriptReference/Debug.html"><span style="color: #000022;">Debug</span></a>.<span style="color: #0000FF;">LogWarning</span><span style="color: #000000;">(</span><span style="color: #808080;">"tried to add a field to a non-object JSONObject.&nbsp; We'll do it for you, but you might be doing something wrong."</span><span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; keys.<span style="color: #0000FF;">Add</span><span style="color: #000000;">(</span>name<span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; list.<span style="color: #0000FF;">Add</span><span style="color: #000000;">(</span>obj<span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; <span style="color: #0600FF;">public</span> <span style="color: #0600FF;">void</span> SetField<span style="color: #000000;">(</span><span style="color: #FF0000;">string</span> name, JSONObject obj<span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">if</span><span style="color: #000000;">(</span>HasField<span style="color: #000000;">(</span>name<span style="color: #000000;">)</span><span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; list.<span style="color: #0000FF;">Remove</span><span style="color: #000000;">(</span><span style="color: #0600FF;">this</span><span style="color: #000000;">[</span>name<span style="color: #000000;">]</span><span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; keys.<span style="color: #0000FF;">Remove</span><span style="color: #000000;">(</span>name<span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; AddField<span style="color: #000000;">(</span>name, obj<span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; <span style="color: #0600FF;">public</span> JSONObject GetField<span style="color: #000000;">(</span><span style="color: #FF0000;">string</span> name<span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">if</span><span style="color: #000000;">(</span>type == JSONObject.<span style="color: #0000FF;">Type</span>.<span style="color: #FF0000;">OBJECT</span><span style="color: #000000;">)</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">for</span><span style="color: #000000;">(</span><span style="color: #FF0000;">int</span> i = <span style="color: #FF0000;">0</span>; i &lt; keys.<span style="color: #0000FF;">Count</span>; i++<span style="color: #000000;">)</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">if</span><span style="color: #000000;">(</span><span style="color: #000000;">(</span><span style="color: #FF0000;">string</span><span style="color: #000000;">)</span>keys<span style="color: #000000;">[</span>i<span style="color: #000000;">]</span> == name<span style="color: #000000;">)</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">return</span> <span style="color: #000000;">(</span>JSONObject<span style="color: #000000;">)</span>list<span style="color: #000000;">[</span>i<span style="color: #000000;">]</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">return</span> <span style="color: #0600FF;">null</span>;<br>
&nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; <span style="color: #0600FF;">public</span> <span style="color: #FF0000;">bool</span> HasField<span style="color: #000000;">(</span><span style="color: #FF0000;">string</span> name<span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">if</span><span style="color: #000000;">(</span>type == JSONObject.<span style="color: #0000FF;">Type</span>.<span style="color: #FF0000;">OBJECT</span><span style="color: #000000;">)</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">for</span><span style="color: #000000;">(</span><span style="color: #FF0000;">int</span> i = <span style="color: #FF0000;">0</span>; i &lt; keys.<span style="color: #0000FF;">Count</span>; i++<span style="color: #000000;">)</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">if</span><span style="color: #000000;">(</span><span style="color: #000000;">(</span><span style="color: #FF0000;">string</span><span style="color: #000000;">)</span>keys<span style="color: #000000;">[</span>i<span style="color: #000000;">]</span> == name<span style="color: #000000;">)</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">return</span> <span style="color: #0600FF;">true</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">return</span> <span style="color: #0600FF;">false</span>;<br>
&nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; <span style="color: #0600FF;">public</span> <span style="color: #0600FF;">void</span> Clear<span style="color: #000000;">(</span><span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; type = JSONObject.<span style="color: #0000FF;">Type</span>.<span style="color: #0600FF;">NULL</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; list.<span style="color: #0000FF;">Clear</span><span style="color: #000000;">(</span><span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; keys.<span style="color: #0000FF;">Clear</span><span style="color: #000000;">(</span><span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; str = <span style="color: #808080;">""</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; n = <span style="color: #FF0000;">0</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; b = <span style="color: #0600FF;">false</span>;<br>
&nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; <span style="color: #0600FF;">public</span> JSONObject Copy<span style="color: #000000;">(</span><span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">return</span> <span style="color: #008000;">new</span> JSONObject<span style="color: #000000;">(</span>print<span style="color: #000000;">(</span><span style="color: #000000;">)</span><span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; <span style="color: #008080; font-style: italic;">/*<br>
&nbsp; &nbsp;&nbsp; * The Merge function is experimental. Use at your own risk.<br>
&nbsp; &nbsp;&nbsp; */</span><br>
&nbsp; &nbsp; <span style="color: #0600FF;">public</span> <span style="color: #0600FF;">void</span> Merge<span style="color: #000000;">(</span>JSONObject obj<span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; MergeRecur<span style="color: #000000;">(</span><span style="color: #0600FF;">this</span>, obj<span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; <span style="color: #0600FF;">static</span> <span style="color: #0600FF;">void</span> MergeRecur<span style="color: #000000;">(</span>JSONObject left, JSONObject right<span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">if</span><span style="color: #000000;">(</span>right.<span style="color: #0000FF;">type</span> == JSONObject.<span style="color: #0000FF;">Type</span>.<span style="color: #FF0000;">OBJECT</span><span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">for</span><span style="color: #000000;">(</span><span style="color: #FF0000;">int</span> i = <span style="color: #FF0000;">0</span>; i &lt; right.<span style="color: #0000FF;">list</span>.<span style="color: #0000FF;">Count</span>; i++<span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">if</span><span style="color: #000000;">(</span>right.<span style="color: #0000FF;">keys</span><span style="color: #000000;">[</span>i<span style="color: #000000;">]</span>&nbsp;!= <span style="color: #0600FF;">null</span><span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #FF0000;">string</span> key = <span style="color: #000000;">(</span><span style="color: #FF0000;">string</span><span style="color: #000000;">)</span>right.<span style="color: #0000FF;">keys</span><span style="color: #000000;">[</span>i<span style="color: #000000;">]</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; JSONObject val = <span style="color: #000000;">(</span>JSONObject<span style="color: #000000;">)</span>right.<span style="color: #0000FF;">list</span><span style="color: #000000;">[</span>i<span style="color: #000000;">]</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">if</span><span style="color: #000000;">(</span>val.<span style="color: #0000FF;">type</span> == JSONObject.<span style="color: #0000FF;">Type</span>.<span style="color: #0000FF;">ARRAY</span> || val.<span style="color: #0000FF;">type</span> == JSONObject.<span style="color: #0000FF;">Type</span>.<span style="color: #FF0000;">OBJECT</span><span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">if</span><span style="color: #000000;">(</span>left.<span style="color: #0000FF;">HasField</span><span style="color: #000000;">(</span>key<span style="color: #000000;">)</span><span style="color: #000000;">)</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MergeRecur<span style="color: #000000;">(</span>left<span style="color: #000000;">[</span>key<span style="color: #000000;">]</span>, val<span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">else</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; left.<span style="color: #0000FF;">AddField</span><span style="color: #000000;">(</span>key, val<span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000000;">}</span> <span style="color: #0600FF;">else</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">if</span><span style="color: #000000;">(</span>left.<span style="color: #0000FF;">HasField</span><span style="color: #000000;">(</span>key<span style="color: #000000;">)</span><span style="color: #000000;">)</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; left.<span style="color: #0000FF;">SetField</span><span style="color: #000000;">(</span>key, val<span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">else</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; left.<span style="color: #0000FF;">AddField</span><span style="color: #000000;">(</span>key, val<span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000000;">}</span><span style="color: #008080; font-style: italic;">// else left.list.Add(right.list);</span><br>
&nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; <span style="color: #0600FF;">public</span> <span style="color: #FF0000;">string</span> print<span style="color: #000000;">(</span><span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">return</span> print<span style="color: #000000;">(</span><span style="color: #FF0000;">0</span><span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; <span style="color: #0600FF;">public</span> <span style="color: #FF0000;">string</span> print<span style="color: #000000;">(</span><span style="color: #FF0000;">int</span> depth<span style="color: #000000;">)</span> <span style="color: #000000;">{</span>&nbsp; &nbsp; <span style="color: #008080; font-style: italic;">//Convert the JSONObject into a stiring</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">if</span><span style="color: #000000;">(</span>depth++ &gt; MAX_DEPTH<span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <a href="http://unity3d.com/Documentation/ScriptReference/Debug.html"><span style="color: #000022;">Debug</span></a>.<span style="color: #0000FF;">Log</span><span style="color: #000000;">(</span><span style="color: #808080;">"reached max depth!"</span><span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">return</span> <span style="color: #808080;">""</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #FF0000;">string</span> str = <span style="color: #808080;">""</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">switch</span><span style="color: #000000;">(</span>type<span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">case</span> Type.<span style="color: #FF0000;">STRING</span>:<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; str = <span style="color: #808080;">"<span style="color: #008080; font-weight: bold;">\"</span>"</span> + <span style="color: #0600FF;">this</span>.<span style="color: #0000FF;">str</span> + <span style="color: #808080;">"<span style="color: #008080; font-weight: bold;">\"</span>"</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">break</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">case</span> Type.<span style="color: #0000FF;">NUMBER</span>:<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; str += n;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">break</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">case</span> JSONObject.<span style="color: #0000FF;">Type</span>.<span style="color: #FF0000;">OBJECT</span>:<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">if</span><span style="color: #000000;">(</span>list.<span style="color: #0000FF;">Count</span> &gt; <span style="color: #FF0000;">0</span><span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; str = <span style="color: #808080;">"{"</span>;<br>
<span style="color: #008080;">#if(READABLE)&nbsp; &nbsp;//for a bit more readability, comment the define above to save space</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; str += <span style="color: #808080;">"<span style="color: #008080; font-weight: bold;">\n</span>"</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; depth++;<br>
<span style="color: #008080;">#endif</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">for</span><span style="color: #000000;">(</span><span style="color: #FF0000;">int</span> i = <span style="color: #FF0000;">0</span>; i &lt; list.<span style="color: #0000FF;">Count</span>; i++<span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #FF0000;">string</span> key = <span style="color: #000000;">(</span><span style="color: #FF0000;">string</span><span style="color: #000000;">)</span>keys<span style="color: #000000;">[</span>i<span style="color: #000000;">]</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; JSONObject obj = <span style="color: #000000;">(</span>JSONObject<span style="color: #000000;">)</span>list<span style="color: #000000;">[</span>i<span style="color: #000000;">]</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">if</span><span style="color: #000000;">(</span>obj<span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
<span style="color: #008080;">#if(READABLE)</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">for</span><span style="color: #000000;">(</span><span style="color: #FF0000;">int</span> j = <span style="color: #FF0000;">0</span>; j &lt; depth; j++<span style="color: #000000;">)</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; str += <span style="color: #808080;">"<span style="color: #008080; font-weight: bold;">\t</span>"</span>; <span style="color: #008080; font-style: italic;">//for a bit more readability</span><br>
<span style="color: #008080;">#endif</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; str += <span style="color: #808080;">"<span style="color: #008080; font-weight: bold;">\"</span>"</span> + key + <span style="color: #808080;">"<span style="color: #008080; font-weight: bold;">\"</span>:"</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; str += obj.<span style="color: #0000FF;">print</span><span style="color: #000000;">(</span>depth<span style="color: #000000;">)</span> + <span style="color: #808080;">","</span>;<br>
<span style="color: #008080;">#if(READABLE)</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; str += <span style="color: #808080;">"<span style="color: #008080; font-weight: bold;">\n</span>"</span>;<br>
<span style="color: #008080;">#endif</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000000;">}</span><br>
<span style="color: #008080;">#if(READABLE)</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; str = str.<span style="color: #0000FF;">Substring</span><span style="color: #000000;">(</span><span style="color: #FF0000;">0</span>, str.<span style="color: #0000FF;">Length</span> - <span style="color: #FF0000;">1</span><span style="color: #000000;">)</span>;<br>
<span style="color: #008080;">#endif</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; str = str.<span style="color: #0000FF;">Substring</span><span style="color: #000000;">(</span><span style="color: #FF0000;">0</span>, str.<span style="color: #0000FF;">Length</span> - <span style="color: #FF0000;">1</span><span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; str += <span style="color: #808080;">"}"</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000000;">}</span> <span style="color: #0600FF;">else</span> str += <span style="color: #808080;">"null"</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">break</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">case</span> JSONObject.<span style="color: #0000FF;">Type</span>.<span style="color: #0000FF;">ARRAY</span>:<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">if</span><span style="color: #000000;">(</span>list.<span style="color: #0000FF;">Count</span> &gt; <span style="color: #FF0000;">0</span><span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; str = <span style="color: #808080;">"["</span>;<br>
<span style="color: #008080;">#if(READABLE)</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; str += <span style="color: #808080;">"<span style="color: #008080; font-weight: bold;">\n</span>"</span>; <span style="color: #008080; font-style: italic;">//for a bit more readability</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; depth++;<br>
<span style="color: #008080;">#endif</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">foreach</span><span style="color: #000000;">(</span>JSONObject obj <span style="color: #0600FF;">in</span> list<span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">if</span><span style="color: #000000;">(</span>obj<span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
<span style="color: #008080;">#if(READABLE)</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">for</span><span style="color: #000000;">(</span><span style="color: #FF0000;">int</span> j = <span style="color: #FF0000;">0</span>; j &lt; depth; j++<span style="color: #000000;">)</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; str += <span style="color: #808080;">"<span style="color: #008080; font-weight: bold;">\t</span>"</span>; <span style="color: #008080; font-style: italic;">//for a bit more readability</span><br>
<span style="color: #008080;">#endif</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; str += obj.<span style="color: #0000FF;">print</span><span style="color: #000000;">(</span>depth<span style="color: #000000;">)</span> + <span style="color: #808080;">","</span>;<br>
<span style="color: #008080;">#if(READABLE)</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; str += <span style="color: #808080;">"<span style="color: #008080; font-weight: bold;">\n</span>"</span>; <span style="color: #008080; font-style: italic;">//for a bit more readability</span><br>
<span style="color: #008080;">#endif</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000000;">}</span><br>
<span style="color: #008080;">#if(READABLE)</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; str = str.<span style="color: #0000FF;">Substring</span><span style="color: #000000;">(</span><span style="color: #FF0000;">0</span>, str.<span style="color: #0000FF;">Length</span> - <span style="color: #FF0000;">1</span><span style="color: #000000;">)</span>;<br>
<span style="color: #008080;">#endif</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; str = str.<span style="color: #0000FF;">Substring</span><span style="color: #000000;">(</span><span style="color: #FF0000;">0</span>, str.<span style="color: #0000FF;">Length</span> - <span style="color: #FF0000;">1</span><span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; str += <span style="color: #808080;">"]"</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">break</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">case</span> Type.<span style="color: #FF0000;">BOOL</span>:<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">if</span><span style="color: #000000;">(</span>b<span style="color: #000000;">)</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; str += <span style="color: #808080;">"true"</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">else</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; str += <span style="color: #808080;">"false"</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">break</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">case</span> Type.<span style="color: #0600FF;">NULL</span>:<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; str = <span style="color: #808080;">"null"</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">break</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">return</span> str;<br>
&nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; <span style="color: #0600FF;">public</span> JSONObject <span style="color: #0600FF;">this</span><span style="color: #000000;">[</span><span style="color: #FF0000;">int</span> index<span style="color: #000000;">]</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; get <span style="color: #000000;">{</span> <span style="color: #0600FF;">return</span> <span style="color: #000000;">(</span>JSONObject<span style="color: #000000;">)</span>list<span style="color: #000000;">[</span>index<span style="color: #000000;">]</span>; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; <span style="color: #0600FF;">public</span> JSONObject <span style="color: #0600FF;">this</span><span style="color: #000000;">[</span><span style="color: #FF0000;">string</span> index<span style="color: #000000;">]</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; get <span style="color: #000000;">{</span> <span style="color: #0600FF;">return</span> GetField<span style="color: #000000;">(</span>index<span style="color: #000000;">)</span>; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; <span style="color: #0600FF;">public</span> <span style="color: #0600FF;">override</span> <span style="color: #FF0000;">string</span> ToString<span style="color: #000000;">(</span><span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">return</span> print<span style="color: #000000;">(</span><span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; <span style="color: #0600FF;">public</span> Dictionary&lt;string, string&gt; ToDictionary<span style="color: #000000;">(</span><span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">if</span><span style="color: #000000;">(</span>type == Type.<span style="color: #FF0000;">OBJECT</span><span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Dictionary&lt;string, string&gt; result = <span style="color: #008000;">new</span> Dictionary&lt;string, string&gt;<span style="color: #000000;">(</span><span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">for</span><span style="color: #000000;">(</span><span style="color: #FF0000;">int</span> i = <span style="color: #FF0000;">0</span>; i &lt; list.<span style="color: #0000FF;">Count</span>; i++<span style="color: #000000;">)</span> <span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; JSONObject val = <span style="color: #000000;">(</span>JSONObject<span style="color: #000000;">)</span>list<span style="color: #000000;">[</span>i<span style="color: #000000;">]</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">switch</span><span style="color: #000000;">(</span>val.<span style="color: #0000FF;">type</span><span style="color: #000000;">)</span><span style="color: #000000;">{</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">case</span> Type.<span style="color: #FF0000;">STRING</span>:&nbsp; &nbsp;result.<span style="color: #0000FF;">Add</span><span style="color: #000000;">(</span><span style="color: #000000;">(</span><span style="color: #FF0000;">string</span><span style="color: #000000;">)</span>keys<span style="color: #000000;">[</span>i<span style="color: #000000;">]</span>, val.<span style="color: #0000FF;">str</span><span style="color: #000000;">)</span>;&nbsp; &nbsp; <span style="color: #0600FF;">break</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">case</span> Type.<span style="color: #0000FF;">NUMBER</span>:&nbsp; &nbsp;result.<span style="color: #0000FF;">Add</span><span style="color: #000000;">(</span><span style="color: #000000;">(</span><span style="color: #FF0000;">string</span><span style="color: #000000;">)</span>keys<span style="color: #000000;">[</span>i<span style="color: #000000;">]</span>, val.<span style="color: #0000FF;">n</span> + <span style="color: #808080;">""</span><span style="color: #000000;">)</span>;&nbsp; &nbsp;<span style="color: #0600FF;">break</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">case</span> Type.<span style="color: #FF0000;">BOOL</span>:&nbsp;&nbsp;result.<span style="color: #0000FF;">Add</span><span style="color: #000000;">(</span><span style="color: #000000;">(</span><span style="color: #FF0000;">string</span><span style="color: #000000;">)</span>keys<span style="color: #000000;">[</span>i<span style="color: #000000;">]</span>, val.<span style="color: #0000FF;">b</span> + <span style="color: #808080;">""</span><span style="color: #000000;">)</span>;&nbsp;<span style="color: #0600FF;">break</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">default</span>: <a href="http://unity3d.com/Documentation/ScriptReference/Debug.html"><span style="color: #000022;">Debug</span></a>.<span style="color: #0000FF;">LogWarning</span><span style="color: #000000;">(</span><span style="color: #808080;">"Omitting object: "</span> + <span style="color: #000000;">(</span><span style="color: #FF0000;">string</span><span style="color: #000000;">)</span>keys<span style="color: #000000;">[</span>i<span style="color: #000000;">]</span> + <span style="color: #808080;">" in dictionary conversion"</span><span style="color: #000000;">)</span>; <span style="color: #0600FF;">break</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000000;">}</span><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">return</span> result;<br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #000000;">}</span> <span style="color: #0600FF;">else</span> <a href="http://unity3d.com/Documentation/ScriptReference/Debug.html"><span style="color: #000022;">Debug</span></a>.<span style="color: #0000FF;">LogWarning</span><span style="color: #000000;">(</span><span style="color: #808080;">"Tried to turn non-Object JSONObject into a dictionary"</span><span style="color: #000000;">)</span>;<br>
&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #0600FF;">return</span> <span style="color: #0600FF;">null</span>;<br>
&nbsp; &nbsp; <span style="color: #000000;">}</span><br>
<span style="color: #000000;">}</span><br>
</p>
&nbsp;</div>

<!-- 
NewPP limit report
Preprocessor node count: 64/1000000
Post-expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key unify_wiki:pcache:idhash:2788-0!1!0!!en!2 and timestamp 20110522205235 -->
<div class="printfooter">
Retrieved from "<a href="http://www.unifycommunity.com/wiki/index.php?title=JSONObject">http://www.unifycommunity.com/wiki/index.php?title=JSONObject</a>"</div>
		<div id="catlinks" class="catlinks catlinks-allhidden"></div>		<!-- end content -->
				<div class="visualClear"></div>
	</div>
</div></div>
<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
				 <li id="ca-nstab-main" class="selected"><a href="http://www.unifycommunity.com/wiki/index.php?title=JSONObject" title="View the content page [alt-c]" accesskey="c">Page</a></li>
				 <li id="ca-talk"><a href="http://www.unifycommunity.com/wiki/index.php?title=Talk:JSONObject" title="Discussion about the content page [alt-t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="http://www.unifycommunity.com/wiki/index.php?title=JSONObject&action=edit" title="You can edit this page. Please use the preview button before saving [alt-e]" accesskey="e">Edit</a></li>
				 <li id="ca-history"><a href="http://www.unifycommunity.com/wiki/index.php?title=JSONObject&action=history" title="Past revisions of this page [alt-h]" accesskey="h">History</a></li>
				 <li id="ca-move"><a href="http://www.unifycommunity.com/wiki/index.php?title=Special:MovePage/JSONObject" title="Move this page [alt-m]" accesskey="m">Move</a></li>
				 <li id="ca-unwatch"><a href="http://www.unifycommunity.com/wiki/index.php?title=JSONObject&action=unwatch" title="Remove this page from your watchlist [alt-w]" accesskey="w">Unwatch</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-userpage"><a href="http://www.unifycommunity.com/wiki/index.php?title=User:Scone" title="Your user page [alt-.]" accesskey="." class="new">Scone</a></li>
				<li id="pt-mytalk"><a href="http://www.unifycommunity.com/wiki/index.php?title=User_talk:Scone" title="Your talk page [alt-n]" accesskey="n" class="new">My talk</a></li>
				<li id="pt-preferences"><a href="http://www.unifycommunity.com/wiki/index.php?title=Special:Preferences" title="Your preferences">My preferences</a></li>
				<li id="pt-watchlist"><a href="http://www.unifycommunity.com/wiki/index.php?title=Special:Watchlist" title="The list of pages you are monitoring for changes [alt-l]" accesskey="l">My watchlist</a></li>
				<li id="pt-mycontris"><a href="http://www.unifycommunity.com/wiki/index.php?title=Special:Contributions/Scone" title="List of your contributions [alt-y]" accesskey="y">My contributions</a></li>
				<li id="pt-logout"><a href="http://www.unifycommunity.com/wiki/index.php?title=Special:UserLogout&returnto=JSONObject" title="Log out">Log out</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://www.unifycommunity.com/wiki/wiki.png);" href="http://www.unifycommunity.com/wiki/index.php?title=Main_Page" title="Visit the main page"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class="generated-sidebar portlet" id="p-Navigation">
		<h5>Navigation</h5>
		<div class="pBody">
			<ul>
				<li id="n-mainpage"><a href="http://www.unifycommunity.com/wiki/index.php?title=Main_Page" title="Visit the main page [alt-z]" accesskey="z">Main Page</a></li>
				<li id="n-Extensions"><a href="http://www.unifycommunity.com/wiki/index.php?title=Extensions">Extensions</a></li>
				<li id="n-Particle-Library"><a href="http://www.unifycommunity.com/wiki/index.php?title=Particle_Library">Particle Library</a></li>
				<li id="n-Programming"><a href="http://www.unifycommunity.com/wiki/index.php?title=Programming">Programming</a></li>
				<li id="n-Scripts"><a href="http://www.unifycommunity.com/wiki/index.php?title=Scripts">Scripts</a></li>
				<li id="n-Shaders"><a href="http://www.unifycommunity.com/wiki/index.php?title=Shaders">Shaders</a></li>
				<li id="n-Wizards"><a href="http://www.unifycommunity.com/wiki/index.php?title=Wizards">Wizards</a></li>
			</ul>
		</div>
	</div>
	<div class="generated-sidebar portlet" id="p-Extras">
		<h5>Extras</h5>
		<div class="pBody">
			<ul>
				<li id="n-Tips.2C-Tricks.2C-Tools"><a href="http://www.unifycommunity.com/wiki/index.php?title=Tips">Tips, Tricks, Tools</a></li>
				<li id="n-Tutorials"><a href="http://www.unifycommunity.com/wiki/index.php?title=Tutorials">Tutorials</a></li>
				<li id="n-Unity-Projects"><a href="http://www.unifycommunity.com/wiki/index.php?title=Unity_Projects">Unity Projects</a></li>
				<li id="n-Contests"><a href="http://www.unifycommunity.com/wiki/index.php?title=Contests">Contests</a></li>
				<li id="n-IRC-Chatroom"><a href="http://www.unifycommunity.com/wiki/index.php?title=IRC">IRC Chatroom</a></li>
			</ul>
		</div>
	</div>
	<div class="generated-sidebar portlet" id="p-Quick_Links">
		<h5>Quick Links</h5>
		<div class="pBody">
			<ul>
				<li id="n-portal"><a href="http://www.unifycommunity.com/wiki/index.php?title=Unify_Community_Wiki:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="http://www.unifycommunity.com/wiki/index.php?title=Special:RecentChanges" title="The list of recent changes in the wiki [alt-r]" accesskey="r">Recent changes</a></li>
				<li id="n-New-Pages"><a href="http://www.unifycommunity.com/wiki/index.php?title=Special:NewPages">New Pages</a></li>
				<li id="n-help"><a href="http://www.unifycommunity.com/wiki/index.php?title=Help:Contents" title="The place to find out">Help</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="http://www.unifycommunity.com/wiki/index.php" id="searchform">
				<input type="hidden" name="title" value="Special:Search">
				<input id="searchInput" title="Search Unify Community Wiki" accesskey="f" type="search" name="search">
				<input type="submit" name="go" class="searchButton" id="searchGoButton" value="Go" title="Go to a page with this exact name if exists">&nbsp;
				<input type="submit" name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search the pages for this text">
			</form>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="http://www.unifycommunity.com/wiki/index.php?title=Special:WhatLinksHere/JSONObject" title="List of all wiki pages that link here [alt-j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="http://www.unifycommunity.com/wiki/index.php?title=Special:RecentChangesLinked/JSONObject" title="Recent changes in pages linked from this page [alt-k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="http://www.unifycommunity.com/wiki/index.php?title=Special:Upload" title="Upload files [alt-u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="http://www.unifycommunity.com/wiki/index.php?title=Special:SpecialPages" title="List of all special pages [alt-q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="http://www.unifycommunity.com/wiki/index.php?title=JSONObject&printable=yes" rel="alternate" title="Printable version of this page [alt-p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="http://www.unifycommunity.com/wiki/index.php?title=JSONObject&oldid=10647" title="Permanent link to this revision of the page">Permanent link</a></li>			</ul>
		</div>
	</div>
</div><!-- end of the left (by default at least) column -->
<div class="visualClear"></div>
<div id="footer">
	<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="./index_files/poweredby_mediawiki_88x31.png" height="31" width="88" alt="Powered by MediaWiki"></a></div>
	<ul id="f-list">
		<li id="lastmod"> This page was last modified on 22 May 2011, at 20:52.</li>
		<li id="viewcount">This page has been accessed 3,556 times.</li>
		<li id="privacy"><a href="http://www.unifycommunity.com/wiki/index.php?title=Unify_Community_Wiki:Privacy_policy" title="Unify Community Wiki:Privacy policy">Privacy policy</a></li>
		<li id="about"><a href="http://www.unifycommunity.com/wiki/index.php?title=Unify_Community_Wiki:About" title="Unify Community Wiki:About">About Unify Community Wiki</a></li>
		<li id="disclaimer"><a href="http://www.unifycommunity.com/wiki/index.php?title=Unify_Community_Wiki:General_disclaimer" title="Unify Community Wiki:General disclaimer">Disclaimers</a></li>
	</ul>
</div>
</div>

<script>if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served in 0.182 secs. -->
</body></html>